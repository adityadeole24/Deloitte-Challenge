AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ResourcePrefix: 
    Type: String
    Default: webapp
    Description: Used as a prefix for project resources.
  EnvironmentName: 
    Type: String
    Default: dev
    Description: Default environment is development
  EnableCloudWatchAlarms:
    Type: String
    Default: true
    Description: Specify true if you want to set up cloudwatch alerts
    AllowedValues: [true, false]
  LambdaLogRetentionInDays:
    Type: Number
    Default: 1
    Description: Log retention for lambda Cloudwatch log group. Default is 30 days.
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
#-----------------------------------------------------------------------------------------------------------------------------
Conditions:
  NeedCWMonitoring: !Equals [!Ref EnableCloudWatchAlarms, true]
#-----------------------------------------------------------------------------------------------------------------------------
Resources:
#DynamoDb
  DynamoDbTable: #Stores all the input data
    Type: AWS::DynamoDB::Table
    #DeletionPolicy: Retain # Table retained if CF stack is deleted. This is to avoid important data being deleted. 
    #UpdateReplacePolicy: Retain # Table cannot be replaced
    Properties:
      TableName: !Join ['-', [!Ref 'ResourcePrefix', !Ref 'EnvironmentName', 'ddbtable']]
      BillingMode: PAY_PER_REQUEST # Autoscaled as per utilization
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH #partition key
      SSESpecification: # Encrytion enabled
        SSEEnabled: true

  WebAppLambdaRole: #Role to perform various functions to DDb using Lambda
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', [!Ref 'ResourcePrefix', !Ref 'EnvironmentName', 'WebAppLambdaRole']]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: DataPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:DeleteItem'
                Resource: !GetAtt DynamoDbTable.Arn
#------------------------------------------------------------------------------------------------------------------------------------
#Lambdafunction
  WebAppLambda:  
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ['-', [!Ref 'ResourcePrefix', !Ref 'EnvironmentName', 'InputFunction']]
      Description: Lambda function to input user data to DynamoDb table
      Runtime: python3.7
      Handler: index.lambda_handler 
      Timeout: 180
      Role: !GetAtt 
        - WebAppLambdaRole
        - Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDbTable
      Code: 
       ZipFile:  |
         
         import json


         import os


         import boto3

        
         from time import localtime, strftime

         
         dynamodb = boto3.resource('dynamodb')

       
       
         table = dynamodb.Table(os.environ['TABLE_NAME'])

         
         now = strftime("%a, %d %b %Y %H:%M:%S +0000", localtime())



         def lambda_handler(event, context): 
            print(event)
            body = json.loads(event['body'])
            print(body)

            name = body['firstName'] +' '+ body['lastName']
            response = table.put_item(
                Item={
                  'ID':name,
                  'LatestGreetingTime':now
                }
            )
         # return a properly formatted JSON object
            return {
              'statusCode': 200,
              'body': json.dumps('Thanks for your input, ' + name)
            }

  WebAppLambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "WebAppLambda.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebAppApi}/*"
#------------------------------------------------------------------------------------------------------------------------------------
#Monitoring enabled for lambda function

#CloudWatch Rule
  WebAppLambdaCWRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Join ['-', [!Ref 'ResourcePrefix', !Ref 'EnvironmentName', 'InputFunctionCWRule']]
      ScheduleExpression: rate(30 days)
      State: ENABLED
      Targets:
        - Arn: !Sub ${WebAppLambda.Arn}
          Id: LambdaSchedule 

# Adding Lambda permisssion so Cloudwatch rule can invoke it 
  WebAppLambdaCWRuleInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Sub ${WebAppLambda.Arn}
      Principal: events.amazonaws.com
      SourceArn: !Sub ${WebAppLambdaCWRule.Arn}   

# Adding Lambda Log group
  WebAppLambdaCWRuleLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Join ['-', [!Ref 'ResourcePrefix', !Ref 'EnvironmentName', 'InputFunctionCWLogGroup']]
      RetentionInDays: !Ref LambdaLogRetentionInDays

# Cloud Watch Alarms
  WebAppLambdaErrorsTooHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: NeedCWMonitoring
    Properties:
      AlarmName: !Join ['-', [!Ref 'ResourcePrefix', !Ref 'EnvironmentName', 'InputFunctionErrorsTooHighAlarm']]
      AlarmDescription: 'Invocations failed due to errors in the function'
      Namespace: 'AWS/Lambda'
      MetricName: Errors
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: 'notBreaching'
      Threshold: 0
      AlarmActions:
        - !Ref CWSNSTopic
      Dimensions:
        - Name: FunctionName
          Value: !Ref WebAppLambda

  WebAppLambdaThrottlesTooHighAlarm:
      Type: 'AWS::CloudWatch::Alarm'
      Condition: NeedCWMonitoring
      Properties:
        AlarmName: !Join ['-', [!Ref 'ResourcePrefix', !Ref 'EnvironmentName', 'InputFunctionThrottlesTooHighAlarm']]
        AlarmDescription: 'Invocation attempts that are throttled due to invocation rates exceeding the concurrent limits'
        Namespace: 'AWS/Lambda'
        MetricName: Throttles
        Statistic: Sum
        Period: 60
        EvaluationPeriods: 1
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: 'notBreaching'
        Threshold: 0
        AlarmActions:
        - !Ref CWSNSTopic
        Dimensions:
          - Name: FunctionName
            Value: !Ref WebAppLambda

#-----------------------------------------------------------------------------------------------------------------------------------
#SNS topic to recive notifications if alarms
  CWSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Join ['-', [!Ref 'ResourcePrefix', !Ref 'EnvironmentName', 'CWSNSTopic']]
#------------------------------------------------------------------------------------------------------------------------------------
#Create an API resource and a Rest API to invoke Lambda function
  WebAppApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join ['-', [!Ref 'ResourcePrefix', !Ref 'EnvironmentName', 'WebAppApi']]
      Description: API gateway to call WebAppLambda function
      EndpointConfiguration:
            Types:
              - REGIONAL
      FailOnWarnings: true

  WebAppApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref WebAppApi
      ParentId: !GetAtt 
        - WebAppApi
        - RootResourceId
      PathPart: resource

  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: WebAppApi
      ResourceId:
        Ref: WebAppApiResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  WebAppApirequestpost:
     Type: AWS::ApiGateway::Method
     Properties:
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - WebAppLambda
              - Arn
            - /invocations
        IntegrationResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: '200'
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
              
      ResourceId: !Ref WebAppApiResource
      RestApiId: !Ref WebAppApi    

  WebAppApideploy:
    DependsOn:
      - WebAppApirequestpost
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: APi deployment
      RestApiId: !Ref WebAppApi
      StageName: !Ref EnvironmentName

#------------------------------------------------------------------------------------------------------------------------------------  
#S3
  WebAppS3:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Join ['-', [!Ref 'ResourcePrefix', !Ref 'EnvironmentName', 'webapps3']]
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
         - ServerSideEncryptionByDefault: 
            SSEAlgorithm: AES256

  WebAppS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
        Bucket: !Ref WebAppS3
        PolicyDocument:
          Statement:
            - Action: 's3:GetObject'
              Effect: Allow
              Resource: !Sub 'arn:aws:s3:::${WebAppS3}/*'
              Principal:
                CanonicalUser: !Sub ${WebAppS3OriginAccessIdentity.S3CanonicalUserId}
            - Sid: Deny unsecure bucket access
              Effect: Deny
              Principal: "*"
              Action: s3:*
              Resource: !Sub arn:aws:s3:::${WebAppS3}/*
              Condition:
                Bool:
                  aws:SecureTransport: false
    DependsOn:
      - WebAppS3OriginAccessIdentity
#------------------------------------------------------------------------------------------------------------------------------------ 
# Cloudfront 
  WebAppCDN:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub 'CDN for ${WebAppS3}'
        WebACLId : !Ref WebAppCFWAF
        DefaultRootObject: index.html
        Origins:
          - DomainName: !GetAtt WebAppS3.RegionalDomainName
            Id: WebAppS3
            S3OriginConfig:
              OriginAccessIdentity:
                !Join [ "", [ "origin-access-identity/cloudfront/", !Ref WebAppS3OriginAccessIdentity ] ]    
        DefaultCacheBehavior:
          Compress: False
          DefaultTTL: 0
          MaxTTL: 0
          MinTTL: 0
          ForwardedValues:
            QueryString: false
          TargetOriginId: WebAppS3
          ViewerProtocolPolicy: redirect-to-https
  WebAppS3OriginAccessIdentity:
      Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: !Sub 'OriginAccessIdentity for ${WebAppS3}'

#------------------------------------------------------------------------------------------------------------------------------------ 
#WAF
#API WEBACL 
  WebAppApiWAF:
    Type: AWS::WAFRegional::WebACL
    Properties: 
      Name: !Join ['-', [!Ref 'ResourcePrefix', !Ref 'EnvironmentName', 'ApiWaf']]
      DefaultAction: 
        Type: 'ALLOW'
      MetricName: 'CommonAPIgatewayWebACL'

#CloudFront WEBACL 
  WebAppCFWAF:
    Type: AWS::WAF::WebACL
    Properties: 
      Name: !Join ['-', [!Ref 'ResourcePrefix', !Ref 'EnvironmentName', 'CFWaf']]
      DefaultAction: 
        Type: 'ALLOW'
      MetricName: 'CommonCloudfrontWebACL'

#WAF Association
  WebAppApiWAFAssociation:
    Type: "AWS::WAFRegional::WebACLAssociation"
    DependsOn: WebAppApideploy
    Properties:
      ResourceArn: !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/${WebAppApi}/stages/${EnvironmentName}"
      WebACLId: !Ref WebAppApiWAF
